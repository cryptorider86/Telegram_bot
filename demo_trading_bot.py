#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ —Å —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API
"""

import time
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from trading_strategy import MovingAverageStrategy, RSIStrategy
from crypto_trading_bot import PaperTradingBot

class SimulatedExchange:
    """–°–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∏—Ä–∂–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.current_price = 50000.0  # –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ BTC
        self.price_history = []
        self.time_step = 0
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        np.random.seed(42)
        self._generate_base_data()
    
    def _generate_base_data(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        dates = pd.date_range(start=datetime.now() - timedelta(hours=100), 
                             end=datetime.now(), freq='H')
        
        prices = []
        price = self.current_price
        
        for _ in range(len(dates)):
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å —Ç—Ä–µ–Ω–¥–æ–º –∏ –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å—é
            change = np.random.normal(0, 100) + np.random.choice([-1, 1]) * 20
            price += change
            price = max(price, 10000)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
            prices.append(price)
        
        self.base_data = pd.DataFrame({
            'open': prices,
            'high': [p * (1 + np.random.uniform(0, 0.02)) for p in prices],
            'low': [p * (1 - np.random.uniform(0, 0.02)) for p in prices],
            'close': prices,
            'volume': np.random.randint(1000, 10000, len(dates))
        }, index=dates)
        
        self.current_price = prices[-1]
    
    def get_market_data(self, symbol: str, interval: str = "1h", limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        return self.base_data.tail(limit).copy()
    
    def get_current_price(self, symbol: str) -> float:
        """–°–∏–º—É–ª–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
        change = np.random.normal(0, 50)
        self.current_price += change
        self.current_price = max(self.current_price, 10000)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é
        new_timestamp = datetime.now()
        new_row = pd.DataFrame({
            'open': [self.current_price],
            'high': [self.current_price * (1 + np.random.uniform(0, 0.01))],
            'low': [self.current_price * (1 - np.random.uniform(0, 0.01))],
            'close': [self.current_price],
            'volume': [np.random.randint(1000, 10000)]
        }, index=[new_timestamp])
        
        self.base_data = pd.concat([self.base_data, new_row]).tail(200)
        
        return self.current_price

class DemoTradingBot(PaperTradingBot):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.trade_count = 0
        self.max_balance = self.initial_balance
        self.min_balance = self.initial_balance
        
    def start_demo(self, iterations: int = 20, interval: int = 2):
        """–ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        print(f"ü§ñ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è {self.symbol}")
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.initial_balance:.2f}")
        print(f"üîÑ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ç–µ—Ä–∞—Ü–∏–π: {iterations}")
        print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª: {interval} —Å–µ–∫—É–Ω–¥")
        print("=" * 60)
        
        for i in range(iterations):
            print(f"\nüîç –ò—Ç–µ—Ä–∞—Ü–∏—è {i+1}/{iterations}")
            self.check_signals()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            status = self.get_portfolio_status()
            self.max_balance = max(self.max_balance, status['total_value'])
            self.min_balance = min(self.min_balance, status['total_value'])
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 5 –∏—Ç–µ—Ä–∞—Ü–∏–π
            if (i + 1) % 5 == 0:
                self.show_detailed_status()
            
            time.sleep(interval)
        
        print("\n" + "=" * 60)
        print("üìä –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´")
        print("=" * 60)
        self.show_final_results()
    
    def show_detailed_status(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å"""
        status = self.get_portfolio_status()
        print(f"\nüíº –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–°:")
        print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: ${status['balance']:.2f}")
        print(f"   üìä –ü–æ–∑–∏—Ü–∏—è: {status['position_size']:.6f} BTC")
        print(f"   üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${status['total_value']:.2f}")
        print(f"   üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {status['total_return']:.2f}%")
        if status['unrealized_pnl'] != 0:
            print(f"   üìã –ù–µ—Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ü/–£: ${status['unrealized_pnl']:.2f}")
    
    def show_final_results(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
        status = self.get_portfolio_status()
        
        print(f"üí∞ –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.initial_balance:.2f}")
        print(f"üíµ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${status['total_value']:.2f}")
        print(f"üìà –û–±—â–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {status['total_return']:.2f}%")
        print(f"üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.max_balance:.2f}")
        print(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ${self.min_balance:.2f}")
        print(f"üîÑ –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {len(self.strategy.trades)}")
        
        if len(self.strategy.trades) > 0:
            buy_trades = [t for t in self.strategy.trades if t.side == 'buy']
            sell_trades = [t for t in self.strategy.trades if t.side == 'sell']
            print(f"üìà –ü–æ–∫—É–ø–æ–∫: {len(buy_trades)}")
            print(f"üìâ –ü—Ä–æ–¥–∞–∂: {len(sell_trades)}")
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ—Å–∞–¥–∫—É
        max_drawdown = ((self.max_balance - self.min_balance) / self.max_balance) * 100
        print(f"‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%")
    
    def buy_signal(self, price: float):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        if self.position == 0:
            super().buy_signal(price)
            print(f"   üéØ –ü—Ä–∏—á–∏–Ω–∞: –°–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    
    def sell_signal(self, price: float):
        """–£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        if self.position == 1:
            super().sell_signal(price)
            print(f"   üéØ –ü—Ä–∏—á–∏–Ω–∞: –°–∏–≥–Ω–∞–ª —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")

def demo_multiple_strategies():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ"""
    print("üöÄ –°–†–ê–í–ù–ï–ù–ò–ï –¢–û–†–ì–û–í–´–• –°–¢–†–ê–¢–ï–ì–ò–ô –í –†–ï–ê–õ–¨–ù–û–ú –í–†–ï–ú–ï–ù–ò")
    print("=" * 70)
    
    exchange = SimulatedExchange()
    
    strategies = [
        ("Moving Average (5/15)", MovingAverageStrategy(fast_period=5, slow_period=15, initial_capital=10000)),
        ("RSI (25/75)", RSIStrategy(oversold=25, overbought=75, initial_capital=10000)),
    ]
    
    bots = []
    for name, strategy in strategies:
        bot = DemoTradingBot(strategy, exchange, "BTC/USDT", initial_balance=10000)
        bots.append((name, bot))
    
    print(f"üìä –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ BTC: ${exchange.current_price:.2f}")
    print("üîÑ –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏...")
    
    for i in range(15):  # 15 –∏—Ç–µ—Ä–∞—Ü–∏–π
        print(f"\n‚è∞ –ú–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ {i+1}/15")
        current_price = exchange.get_current_price("BTC/USDT")
        print(f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ BTC: ${current_price:.2f}")
        
        for name, bot in bots:
            print(f"\nüìà {name}:")
            bot.check_signals()
            
        time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∏—Ç–µ—Ä–∞—Ü–∏—è–º–∏
    
    # –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 70)
    print("üèÜ –§–ò–ù–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø")
    print("=" * 70)
    
    results = []
    for name, bot in bots:
        status = bot.get_portfolio_status()
        results.append((name, status['total_return'], status['total_value']))
        
        print(f"\nüìä {name}:")
        print(f"   üíµ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${status['total_value']:.2f}")
        print(f"   üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {status['total_return']:.2f}%")
        print(f"   üîÑ –°–¥–µ–ª–æ–∫: {len(bot.strategy.trades)}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—É—á—à—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
    best_strategy = max(results, key=lambda x: x[1])
    print(f"\nüèÜ –õ–£–ß–®–ê–Ø –°–¢–†–ê–¢–ï–ì–ò–Ø: {best_strategy[0]}")
    print(f"üéØ –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {best_strategy[1]:.2f}%")
    print(f"üíµ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${best_strategy[2]:.2f}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–ê–Ø –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    exchange = SimulatedExchange()
    strategy = MovingAverageStrategy(fast_period=8, slow_period=20, initial_capital=10000)
    bot = DemoTradingBot(strategy, exchange, "BTC/USDT", initial_balance=10000)
    
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Moving Average —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    bot.start_demo(iterations=15, interval=1)
    
    print("\n" + "üîÑ" * 30)
    time.sleep(2)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    demo_multiple_strategies()
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("üìù –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏:")
    print("   1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ —Å –±–∏—Ä–∂–∏")
    print("   2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ LiveTradingBot")
    print("   3. –ù–∞—á–Ω–∏—Ç–µ —Å –º–∞–ª—ã—Ö —Å—É–º–º")
    print("   4. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Å—Ç–æ–ø-–ª–æ—Å—Å—ã")

if __name__ == "__main__":
    main()