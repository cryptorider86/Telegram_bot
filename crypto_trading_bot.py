#!/usr/bin/env python3
"""
–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π —Ç–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π API –±–∏—Ä–∂–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ç–æ—Ä–≥–æ–≤–ª—é –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import time
import json
import hmac
import hashlib
import requests
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from trading_strategy import TradingStrategy, MovingAverageStrategy, RSIStrategy

class CryptoExchangeAPI:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –∫—Ä–∏–ø—Ç–æ–±–∏—Ä–∂–∏"""
    
    def __init__(self, api_key: str = "", api_secret: str = "", base_url: str = ""):
        self.api_key = api_key
        self.api_secret = api_secret
        self.base_url = base_url
        self.session = requests.Session()
    
    def get_market_data(self, symbol: str, interval: str = "1h", limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä—ã–Ω–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –≠—Ç–æ –ø—Ä–∏–º–µ—Ä, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è Binance API
        raise NotImplementedError("–†–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏")
    
    def place_order(self, symbol: str, side: str, quantity: float, price: Optional[float] = None) -> Dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞"""
        raise NotImplementedError("–†–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏")
    
    def get_account_balance(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        raise NotImplementedError("–†–µ–∞–ª–∏–∑—É–π—Ç–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∏—Ä–∂–∏")

class BinanceAPI(CryptoExchangeAPI):
    """API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Binance"""
    
    def __init__(self, api_key: str = "", api_secret: str = ""):
        super().__init__(api_key, api_secret, "https://api.binance.com")
    
    def _generate_signature(self, params: Dict) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è Binance API"""
        query_string = "&".join([f"{k}={v}" for k, v in params.items()])
        return hmac.new(
            self.api_secret.encode('utf-8'),
            query_string.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()
    
    def get_market_data(self, symbol: str, interval: str = "1h", limit: int = 100) -> pd.DataFrame:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance"""
        endpoint = "/api/v3/klines"
        params = {
            "symbol": symbol.replace("/", ""),  # BTCUSDT –≤–º–µ—Å—Ç–æ BTC/USDT
            "interval": interval,
            "limit": limit
        }
        
        try:
            response = self.session.get(f"{self.base_url}{endpoint}", params=params)
            response.raise_for_status()
            data = response.json()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
            df = pd.DataFrame(data, columns=[
                'timestamp', 'open', 'high', 'low', 'close', 'volume',
                'close_time', 'quote_asset_volume', 'number_of_trades',
                'taker_buy_base_asset_volume', 'taker_buy_quote_asset_volume', 'ignore'
            ])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
            df['timestamp'] = pd.to_datetime(df['timestamp'], unit='ms')
            df = df.set_index('timestamp')
            
            for col in ['open', 'high', 'low', 'close', 'volume']:
                df[col] = pd.to_numeric(df[col])
            
            return df[['open', 'high', 'low', 'close', 'volume']]
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return pd.DataFrame()
    
    def get_current_price(self, symbol: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã"""
        endpoint = "/api/v3/ticker/price"
        params = {"symbol": symbol.replace("/", "")}
        
        try:
            response = self.session.get(f"{self.base_url}{endpoint}", params=params)
            response.raise_for_status()
            data = response.json()
            return float(data['price'])
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã: {e}")
            return 0.0
    
    def place_order(self, symbol: str, side: str, quantity: float, order_type: str = "MARKET") -> Dict:
        """–†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á–∏)"""
        if not self.api_key or not self.api_secret:
            return {"error": "API –∫–ª—é—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã"}
        
        endpoint = "/api/v3/order"
        timestamp = int(time.time() * 1000)
        
        params = {
            "symbol": symbol.replace("/", ""),
            "side": side.upper(),
            "type": order_type,
            "quantity": quantity,
            "timestamp": timestamp
        }
        
        params["signature"] = self._generate_signature(params)
        
        headers = {"X-MBX-APIKEY": self.api_key}
        
        try:
            response = self.session.post(f"{self.base_url}{endpoint}", data=params, headers=headers)
            return response.json()
        except Exception as e:
            return {"error": str(e)}

class LiveTradingBot:
    """–ë–æ—Ç –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏"""
    
    def __init__(self, strategy: TradingStrategy, exchange: CryptoExchangeAPI, symbol: str = "BTC/USDT"):
        self.strategy = strategy
        self.exchange = exchange
        self.symbol = symbol
        self.is_running = False
        self.position = 0  # 0 = –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–∏, 1 = –¥–ª–∏–Ω–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è
        self.last_signal = 0
        
    def start_trading(self, check_interval: int = 300):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        """–ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        self.is_running = True
        print(f"ü§ñ –ó–∞–ø—É—Å–∫ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è {self.symbol}")
        print(f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {check_interval} —Å–µ–∫—É–Ω–¥")
        
        while self.is_running:
            try:
                self.check_signals()
                time.sleep(check_interval)
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
                self.is_running = False
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {e}")
                time.sleep(60)  # –ñ–¥–µ–º –º–∏–Ω—É—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    def check_signals(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
            data = self.exchange.get_market_data(self.symbol, interval="1h", limit=50)
            if data.empty:
                print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                return
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–≥–Ω–∞–ª—ã
            signals_df = self.strategy.generate_signals(data)
            current_signal = signals_df['signal'].iloc[-1] if 'signal' in signals_df.columns else 0
            current_price = data['close'].iloc[-1]
            
            print(f"üìä –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ {self.symbol}: ${current_price:.2f}")
            print(f"üìà –¢–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª: {current_signal}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—Ä–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            if current_signal != self.last_signal:
                if current_signal == 1 and self.position == 0:  # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø–æ–∫—É–ø–∫—É
                    self.buy_signal(current_price)
                elif current_signal == -1 and self.position == 1:  # –°–∏–≥–Ω–∞–ª –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
                    self.sell_signal(current_price)
                
                self.last_signal = current_signal
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")
    
    def buy_signal(self, price: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É"""
        print(f"üü¢ –°–ò–ì–ù–ê–õ –ù–ê –ü–û–ö–£–ü–ö–£ –ø–æ —Ü–µ–Ω–µ ${price:.2f}")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        # result = self.exchange.place_order(self.symbol, "BUY", quantity)
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        quantity = self.strategy.calculate_position_size(price)
        print(f"üí∞ –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {quantity:.6f}")
        self.position = 1
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Telegram)
        self.send_notification(f"üü¢ –ü–æ–∫—É–ø–∫–∞ {self.symbol} –ø–æ ${price:.2f}")
    
    def sell_signal(self, price: float):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É"""
        print(f"üî¥ –°–ò–ì–ù–ê–õ –ù–ê –ü–†–û–î–ê–ñ–£ –ø–æ —Ü–µ–Ω–µ ${price:.2f}")
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–µ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –≤—ã–∑–æ–≤ API
        # result = self.exchange.place_order(self.symbol, "SELL", self.position_size)
        
        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        print(f"üí∏ –ü—Ä–æ–¥–∞–∂–∞ –ø–æ–∑–∏—Ü–∏–∏")
        self.position = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.send_notification(f"üî¥ –ü—Ä–æ–¥–∞–∂–∞ {self.symbol} –ø–æ ${price:.2f}")
    
    def send_notification(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å Telegram)"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        print(f"üì± [{timestamp}] {message}")
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
        # telegram_bot.send_message(chat_id, message)
    
    def stop_trading(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
        self.is_running = False
        print("üõë –¢–æ—Ä–≥–æ–≤—ã–π –±–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

class PaperTradingBot(LiveTradingBot):
    """–ë–æ—Ç –¥–ª—è –±—É–º–∞–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–µ–Ω–µ–≥)"""
    
    def __init__(self, strategy: TradingStrategy, exchange: CryptoExchangeAPI, 
                 symbol: str = "BTC/USDT", initial_balance: float = 10000):
        super().__init__(strategy, exchange, symbol)
        self.balance = initial_balance
        self.initial_balance = initial_balance
        self.position_size = 0
        self.entry_price = 0
        
    def buy_signal(self, price: float):
        """–ë—É–º–∞–∂–Ω–∞—è –ø–æ–∫—É–ø–∫–∞"""
        if self.position == 0:
            position_value = self.balance * 0.95  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 95% –±–∞–ª–∞–Ω—Å–∞
            self.position_size = position_value / price
            self.entry_price = price
            self.balance = self.balance * 0.05  # –û—Å—Ç–∞–≤–ª—è–µ–º 5% –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑–µ—Ä–≤–∞
            self.position = 1
            
            print(f"üü¢ –ë–£–ú–ê–ñ–ù–ê–Ø –ü–û–ö–£–ü–ö–ê:")
            print(f"   üí∞ –¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${price:.2f}")
            print(f"   üìä –†–∞–∑–º–µ—Ä –ø–æ–∑–∏—Ü–∏–∏: {self.position_size:.6f}")
            print(f"   üíµ –û—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞: ${self.balance:.2f}")
    
    def sell_signal(self, price: float):
        """–ë—É–º–∞–∂–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞"""
        if self.position == 1:
            revenue = self.position_size * price
            profit = revenue - (self.position_size * self.entry_price)
            profit_percent = (profit / (self.position_size * self.entry_price)) * 100
            
            self.balance += revenue
            self.position = 0
            
            print(f"üî¥ –ë–£–ú–ê–ñ–ù–ê–Ø –ü–†–û–î–ê–ñ–ê:")
            print(f"   üí∞ –¶–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞: ${price:.2f}")
            print(f"   üìä –ü—Ä–∏–±—ã–ª—å: ${profit:.2f} ({profit_percent:.2f}%)")
            print(f"   üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${self.balance:.2f}")
            
            # –°–±—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏
            self.position_size = 0
            self.entry_price = 0
    
    def get_portfolio_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
        current_price = self.exchange.get_current_price(self.symbol)
        
        if self.position == 1:
            position_value = self.position_size * current_price
            total_value = self.balance + position_value
            unrealized_pnl = (current_price - self.entry_price) * self.position_size
        else:
            total_value = self.balance
            unrealized_pnl = 0
        
        total_return = ((total_value - self.initial_balance) / self.initial_balance) * 100
        
        return {
            'balance': self.balance,
            'position_size': self.position_size,
            'entry_price': self.entry_price,
            'current_price': current_price,
            'total_value': total_value,
            'unrealized_pnl': unrealized_pnl,
            'total_return': total_return
        }

def main():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –±–æ—Ç–∞"""
    print("ü§ñ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ö–†–ò–ü–¢–û–í–ê–õ–Æ–¢–ù–û–ì–û –¢–û–†–ì–û–í–û–ì–û –ë–û–¢–ê")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∏—Ä–∂–∏ (–±–µ–∑ API –∫–ª—é—á–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
    exchange = BinanceAPI()
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance...")
    data = exchange.get_market_data("BTC/USDT", interval="1h", limit=100)
    
    if not data.empty:
        print(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –¥–∞–Ω–Ω—ã—Ö")
        print(f"üìà –ü–æ—Å–ª–µ–¥–Ω—è—è —Ü–µ–Ω–∞: ${data['close'].iloc[-1]:.2f}")
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        strategy = MovingAverageStrategy(fast_period=10, slow_period=20, initial_capital=10000)
        
        # –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –±—É–º–∞–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏
        bot = PaperTradingBot(strategy, exchange, "BTC/USDT", initial_balance=10000)
        
        print("\nüéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞:")
        print("   1. –ü–æ–ª—É—á–∏—Ç–µ API –∫–ª—é—á–∏ —Å –±–∏—Ä–∂–∏")
        print("   2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –≤ BinanceAPI")
        print("   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ LiveTradingBot –≤–º–µ—Å—Ç–æ PaperTradingBot")
        print("   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ bot.start_trading()")
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        bot.check_signals()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ—Ä—Ç—Ñ–µ–ª—è
        status = bot.get_portfolio_status()
        print(f"\nüíº –°–¢–ê–¢–£–° –ü–û–†–¢–§–ï–õ–Ø:")
        print(f"   üí∞ –ë–∞–ª–∞–Ω—Å: ${status['balance']:.2f}")
        print(f"   üìä –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${status['total_value']:.2f}")
        print(f"   üìà –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {status['total_return']:.2f}%")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏")
        print("üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É")

if __name__ == "__main__":
    main()